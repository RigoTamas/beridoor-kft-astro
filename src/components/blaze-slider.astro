---
import { Image } from "@astrojs/image/components";
import "../styles/blaze-slider.css";
import { Icon } from "astro-icon";
import { getPlaiceholder } from "plaiceholder";
import fs from "node:fs";
interface Props {
  images: { imageRenderable: any; alt: string; mainText: string; pathFromProjectRoot: string }[];
}
const { images } = Astro.props;

const placeHolderImages = {};
for (const img of images) {
  const file = await fs.promises.readFile(img.pathFromProjectRoot);
  const { svg } = await getPlaiceholder(file);
  placeHolderImages[img.pathFromProjectRoot] = svg;
}
---

<div class="blaze-slider">
  <div class="blaze-container">
    <div class="relative ease-in blaze-track-container">
      <div class="blaze-track object-cover">
        {
          images.map((image, iterCount) => {
            const [Svg, svgProps, svgChildren] = placeHolderImages[image.pathFromProjectRoot];
            return (
              <div class="inline-block rounded-none overflow-hidden bg-cover bg-center relative w-full h-[calc(100vh-86px)]">
                {iterCount === 0 ? (
                  <Svg
                    {...svgProps}
                    style={{
                      ...svgProps.style,
                      transform: ["scale(1.5)", svgProps.style.transform].join(" "),
                      filter: "blur(60px)",
                    }}
                    class="z-0 absolute svg-placeholders">
                    {svgChildren.map((child) => {
                      const [Path, pathProps] = child;

                      return <Path {...pathProps} />;
                    })}
                  </Svg>
                ) : null}
                <Image
                  src={image.imageRenderable}
                  alt={image.alt}
                  width={1600}
                  loading={"lazy"}
                  aspectRatio="4:3"
                  format="avif"
                  fit="cover"
                  position="center"
                  class={`main-page-image-${iterCount} z-10 pointer-events-none absolute w-full, h-full object-cover min-w-full min-h-full bg-cover bg-no-repeat`}
                />
                <p class="z-20 absolute mx-auto left-0 right-0 text-center outlineText text-white text-4xl md:text-5xl lg:text-6xl 2xl:text-8xl 3xl:text-9xl">
                  {image.mainText}
                </p>
              </div>
            );
          })
        }
      </div>
      <div class="top-[calc(((100vh-86px)/2)-12px)] left-0 mx-2 md:mx-7 absolute">
        <button class="blaze-prev rotate-[270deg]" id="blaze-prev">
          <div class="w-7 lg:w-9">
            <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
          </div>
        </button>
      </div>
      <div class="right-[50vh] left-[50vh] top-[calc(95vh-86px)] blaze-pagination absolute"></div>

      <div class="top-[calc(((100vh-86px)/2)-12px)] right-0 mx-2 md:mx-7 absolute">
        <button class="blaze-next rotate-90" id="blaze-next">
          <div class="w-7 lg:w-9">
            <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import BlazeSlider from "blaze-slider";
  import "blaze-slider/dist/blaze.css";
  import imagesLoaded from "imagesloaded";

  const el = document.querySelector(".blaze-slider") as HTMLElement;
  const slider = new BlazeSlider(el, {
    all: {
      stopAutoplayOnInteraction: true,
      enableAutoplay: true,
      draggable: true,
      autoplayInterval: 4500,
      transitionDuration: 600,
      slidesToShow: 1,
    },
  });
  slider.stopAutoplay(); // stopping auto play until first image loads
  document.addEventListener("DOMContentLoaded", () => {
    slider.onSlide(() => {
      preloadNext(2, 1);
    });
  });

  document.addEventListener("keydown", (event) => {
    if (event.key === "ArrowRight") {
      slider.next();
      slider.stopAutoplay();
    }
    if (event.key === "ArrowLeft") {
      slider.prev();
      slider.stopAutoplay();
    }
  });

  window.addEventListener("load", async () => {
    await new Promise((resolve) => {
      imagesLoaded(".main-page-image-0", () => {
        resolve(undefined);
      });
    });
    // const svgPlaceholders = document.getElementsByClassName("svg-placeholders"); // hide after first image has been rendered, as placeholder in carousel causes issues on mobile
    // for (const placeholder of svgPlaceholders) {
    //   placeholder.classList.add("hidden");
    // }
    preloadNext(2, 1);
    slider.refresh(); // start auto play
  });

  const preloadNext = (nextCount, prevCount) => {
    Array.from(slider.slides)
      .slice(0, nextCount + 1)
      .map((slide) => slide.querySelector("img"))
      .forEach((s) => s?.setAttribute("loading", "eager"));
    Array.from(slider.slides)
      .slice(-prevCount)
      .map((slide) => slide.querySelector("img"))
      .forEach((s) => s?.setAttribute("loading", "eager"));
  };
</script>

<style>
  /* used for generation: https://codepen.io/darkylmnx/pen/YVmKbj, https://stackoverflow.com/questions/2570972/css-font-border */
  .outlineText {
    @media (min-width: 10px) {
      text-shadow: -1px -1px 0 #143143,-1px 0px 0 #143143,-1px 1px 0 #143143,0px -1px 0 #143143,0px 0px 0 #143143,0px 1px 0 #143143,1px -1px 0 #143143,1px 0px 0 #143143,1px 1px 0 #143143
    }
    @media (min-width: 1024px) {
      text-shadow: -2px -2px 0 #143143,-2px -1px 0 #143143,-2px 0px 0 #143143,-2px 1px 0 #143143,-2px 2px 0 #143143,-1px -2px 0 #143143,-1px -1px 0 #143143,-1px 0px 0 #143143,-1px 1px 0 #143143,-1px 2px 0 #143143,0px -2px 0 #143143,0px -1px 0 #143143,0px 0px 0 #143143,0px 1px 0 #143143,0px 2px 0 #143143,1px -2px 0 #143143,1px -1px 0 #143143,1px 0px 0 #143143,1px 1px 0 #143143,1px 2px 0 #143143,2px -2px 0 #143143,2px -1px 0 #143143,2px 0px 0 #143143,2px 1px 0 #143143,2px 2px 0 #143143
    }
    @media (min-width: 1536px) {
      text-shadow: -3px -3px 0 #143143,-3px -2px 0 #143143,-3px -1px 0 #143143,-3px 0px 0 #143143,-3px 1px 0 #143143,-3px 2px 0 #143143,-3px 3px 0 #143143,-2px -3px 0 #143143,-2px -2px 0 #143143,-2px -1px 0 #143143,-2px 0px 0 #143143,-2px 1px 0 #143143,-2px 2px 0 #143143,-2px 3px 0 #143143,-1px -3px 0 #143143,-1px -2px 0 #143143,-1px -1px 0 #143143,-1px 0px 0 #143143,-1px 1px 0 #143143,-1px 2px 0 #143143,-1px 3px 0 #143143,0px -3px 0 #143143,0px -2px 0 #143143,0px -1px 0 #143143,0px 0px 0 #143143,0px 1px 0 #143143,0px 2px 0 #143143,0px 3px 0 #143143,1px -3px 0 #143143,1px -2px 0 #143143,1px -1px 0 #143143,1px 0px 0 #143143,1px 1px 0 #143143,1px 2px 0 #143143,1px 3px 0 #143143,2px -3px 0 #143143,2px -2px 0 #143143,2px -1px 0 #143143,2px 0px 0 #143143,2px 1px 0 #143143,2px 2px 0 #143143,2px 3px 0 #143143,3px -3px 0 #143143,3px -2px 0 #143143,3px -1px 0 #143143,3px 0px 0 #143143,3px 1px 0 #143143,3px 2px 0 #143143,3px 3px 0 #143143
    }
  }
  
</style>
