---
import { Image } from "@astrojs/image/components";
import Layout from "@layouts/Layout.astro";
import fs from "node:fs";
import "../assets/style/base.css";
import { getPlaiceholder } from "plaiceholder";
import Container from "@components/container.astro";
import Button from "@components/ui/button.astro";
interface Props {
  items: Record<string, any>;
  imagesRenderable: {
    imageRenderable: any;
    alt: string;
    projectType: string;
    pathFromProjectRoot: string;
    text: string;
  }[];
  title: string;
  description: string;
}

const { items, imagesRenderable, title, description } = Astro.props;

const placeHolderImages = {};
for (const img of imagesRenderable) {
  const file = await fs.promises.readFile(img.pathFromProjectRoot);
  const { base64 } = await getPlaiceholder(file);
  placeHolderImages[img.pathFromProjectRoot] = base64;
}
---

<Layout title={title} description={description}>
  <Container>
    <div id="item-store" data-items={JSON.stringify(items)}></div>
    <div>
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-4 justify-center">
        {
          Object.values(items).map((item) => (
            <Button id={`${item.id}-button`} style="outline" class="md:text-lg">
              <p>{item.label}</p>
            </Button>
          ))
        }
      </div>
    </div>
    <div class="mx-auto justify-between text-justify items-center flex">
      <p class="md:text-lg" id="textToShow"></p>
    </div>
    <div>
      <div class="flex flex-wrap flex-row pt-16 pb-8 gap-8 justify-center">
        {
          imagesRenderable.map((item) => {
            const base64 = placeHolderImages[item.pathFromProjectRoot];
            return (
              <div class:list={`${item.projectType} hidden images-selector w-[300px] relative inline-block overflow-hidden rounded-lg`}>
                <img
                  aria-hidden
                  alt=""
                  src={base64}
                  class:list={[
                    "absolute",
                    "inset-0",
                    "w-full",
                    "h-full",
                    "transform",
                    "scale-150",
                    "filter",
                    "blur-2xl",
                    "z-0",
                  ]}
                />
                <Image
                  src={item.imageRenderable}
                  alt={item.alt}
                  width={600}
                  aspectRatio="3:2"
                  format="avif"
                  loading="lazy"
                  fit="cover"
                  position="center"
                  class="w-full z-10"
                />
              </div>
            );
          })
        }
      </div>
    </div>
  </Container>
</Layout>

<script>
  import {
    State,
    hideAndShowItems,
    setInitialUi,
    updateStateAndButtonBackground,
    createInitialState,
  } from "./scripts/filter";
  const itemStoreElement = document.getElementById("item-store");
  const items = JSON.parse(itemStoreElement?.dataset.items!) as Record<string, { label: string; id: string }>;

  const classesToChange = ["bg-beridoorBlue", "ring-2", "ring-cyan-600", "text-white"];
  const buttonsMap = Object.keys(items).reduce(
    (acc, id) => ({ ...acc, [id]: document.getElementById(`${id}-button`) }),
    {}
  );
  const changeFilteredItemSize = { smallClass: "w-[300px]", largeClass: "w-[550px]" };

  const fragment = window.location.hash.substring(1);
  const isValidFragment = Boolean(items[fragment]);
  const state = createInitialState({ items, fragment: isValidFragment ? fragment : undefined });

  setInitialUi({
    selectedButton: buttonsMap[fragment],
    state,
    classesToToggle: classesToChange,
    changeFilteredItemSize,
  });
  updateTextShown({ state });

  for (const currentId of Object.keys(items)) {
    const el = buttonsMap[currentId];
    el?.addEventListener("click", (event) => {
      window.location.hash = state[currentId].isFilterTurnedOn ? "#" : `#${currentId}`;
    });
  }

  window.addEventListener("hashchange", (event) => {
    event.preventDefault();
    const currentId = window.location.hash.substring(1) || new URL(event.oldURL).hash.slice(1);
    state[currentId].isFilterTurnedOn = !state[currentId].isFilterTurnedOn;
    updateStateAndButtonBackground({
      state,
      items,
      buttonsMap,
      currentId,
      classesToRemove: classesToChange,
      classesToToggle: classesToChange,
    });
    hideAndShowItems({ state, changeFilteredItemSize });
    updateTextShown({ state });
  });

  function updateTextShown({ state }: { state: State }) {
    const selectedItem: any = Object.values(state).find((item: any) => {
      return item.isFilterTurnedOn;
    });
    const paragraph = document.getElementById("textToShow");
    while (paragraph?.firstChild) {
      paragraph?.removeChild(paragraph?.firstChild);
    }
    if (selectedItem) {
      const text = document.createTextNode(items[selectedItem.id]?.text);
      paragraph?.appendChild(text);
    }
  }
</script>
