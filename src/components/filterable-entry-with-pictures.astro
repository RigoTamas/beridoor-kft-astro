---
import { Image } from "@astrojs/image/components";
import Layout from "@layouts/Layout.astro";
import fs from "node:fs";
import "../assets/style/base.css";
import { getPlaiceholder } from "plaiceholder";
import Container from "@components/container.astro";
import Button from "@components/ui/button.astro";
import Modal from "./modal.astro";
import { Icon } from "astro-icon";
interface Props {
  items: Record<string, any>;
  imagesRenderable: {
    imageRenderable: any;
    alt: string;
    projectType: string;
    pathFromProjectRoot: string;
    text: string;
  }[];
  title: string;
  description: string;
}

const { items, imagesRenderable, title, description } = Astro.props;

const placeHolderImages = {};
for (const img of imagesRenderable) {
  const file = await fs.promises.readFile(img.pathFromProjectRoot);
  const { base64 } = await getPlaiceholder(file);
  placeHolderImages[img.pathFromProjectRoot] = base64;
}
const projectIterCounter = {};
---

<Layout title={title} description={description}>
  <Container>
    <div id="item-store" data-items={JSON.stringify(items)}></div>
    <div>
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-4 justify-center">
        {
          Object.values(items).map((item) => (
            <Button id={`${item.id}-button`} style="outline" class="md:text-lg">
              <p>{item.label}</p>
            </Button>
          ))
        }
      </div>
    </div>
    <div class="mx-auto justify-between text-justify items-center flex">
      <p class="md:text-lg" id="textToShow"></p>
    </div>
    <div>
      <div class="flex flex-wrap flex-row pt-16 pb-8 gap-8 justify-center">
        {
          imagesRenderable.map((item, iterCount) => {
            const base64 = placeHolderImages[item.pathFromProjectRoot];
            projectIterCounter[item.projectType] =
              projectIterCounter[item.projectType] === undefined ? 0 : projectIterCounter[item.projectType] + 1;
            return (
              <div
                class:list={`${item.projectType} hidden relative images-selector w-[300px] inline-block overflow-hidden rounded-lg`}>
                <img
                  aria-hidden
                  alt=""
                  src={base64}
                  class:list={[
                    "absolute",
                    "inset-0",
                    "w-full",
                    "h-full",
                    "transform",
                    "scale-150",
                    "filter",
                    "blur-2xl",
                    "z-0",
                  ]}
                />
                <Image
                  id={`${item.projectType}~${projectIterCounter[item.projectType]}~${iterCount}`}
                  src={item.imageRenderable}
                  alt={item.alt}
                  width={600}
                  aspectRatio="3:2"
                  format="avif"
                  loading="lazy"
                  fit="cover"
                  position="center"
                  class="w-full"
                />
              </div>
            );
          })
        }
      </div>
    </div>

    <Modal id="dialog" classList="border-beridoorBlue dark:border-white dark:bg-beridoorDarkModeBg bg-white" open="Open modal">
      <button slot="close">
        <Icon class="text-beridoorBlue dark:text-white w-4 h-4" name="close"/>
      </button>
      <main class="max-w-5xl w-full h-full relative" slot="main">
        <div class="blaze-slider">
          <div class="blaze-container">
            <div class="relative blaze-track-container">
              <div class="blaze-track"></div>
              <div class="absolute left-0 mx-2 top-1/2">
                <button class="blaze-prev rotate-[270deg]" id="blaze-prev">
                  <div class="w-7 lg:w-9">
                    <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
                  </div>
                </button>
              </div>

              <div class="absolute right-0 mx-2 top-1/2">
                <button class="blaze-next rotate-90" id="blaze-next">
                  <div class="w-7 lg:w-9">
                    <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </Modal>
  </Container>
</Layout>

<script>
  import {
    State,
    hideAndShowItems,
    setInitialUi,
    updateStateAndButtonBackground,
    createInitialState,
  } from "./scripts/filter";

  import BlazeSlider from "blaze-slider";
  import "blaze-slider/dist/blaze.css";

  const el = document.querySelector(".blaze-slider") as HTMLElement;
  let slider = new BlazeSlider(el, {
    all: {
      stopAutoplayOnInteraction: true,
      enableAutoplay: false,
      draggable: true,
      autoplayInterval: 4500,
      transitionDuration: 600,
      slidesToShow: 1,
    },
  });

  export function changeSliderElements({ state }: { state: State }) {
    const blazeSliderItemsParent = document.querySelector(".blaze-track");
    const activeState = Object.values(state).find((item) => item.isFilterTurnedOn);
    blazeSliderItemsParent?.replaceChildren();
    const images =
      activeState !== undefined
        ? Array.from(document.getElementsByClassName(activeState!.id))
        : Array.from(document.getElementsByClassName("images-selector"));
    for (const element of images) {
      const clonedElement = document.importNode(element, true);
      clonedElement.removeChild(clonedElement.querySelector(".blur-2xl")!);
      clonedElement.className = "";
      blazeSliderItemsParent?.appendChild(clonedElement);
    }
    slider.destroy();
    slider = new BlazeSlider(el, {
      all: {
        stopAutoplayOnInteraction: true,
        enableAutoplay: false,
        draggable: true,
        autoplayInterval: 4500,
        transitionDuration: 600,
        slidesToShow: 1,
      },
    });
  }

  document.addEventListener("keydown", (event) => {
    if (event.key === "ArrowRight") {
      slider.next();
    }
    if (event.key === "ArrowLeft") {
      slider.prev();
    }
  });

  const itemStoreElement = document.getElementById("item-store");
  const items = JSON.parse(itemStoreElement?.dataset.items!) as Record<string, { label: string; id: string }>;

  const classesToChange = ["bg-beridoorBlue", "ring-2", "ring-cyan-600", "text-white"];
  const buttonsMap = Object.keys(items).reduce(
    (acc, id) => ({ ...acc, [id]: document.getElementById(`${id}-button`) }),
    {}
  );
  const changeFilteredItemSize = { smallClass: "w-[300px]", largeClass: "w-[550px]" };

  const fragment = window.location.hash.substring(1);
  const isValidFragment = Boolean(items[fragment]);
  const state = createInitialState({ items, fragment: isValidFragment ? fragment : undefined });

  setInitialUi({
    selectedButton: buttonsMap[fragment],
    state,
    classesToToggle: classesToChange,
    changeFilteredItemSize,
  });
  changeSliderElements({ state });
  updateTextShown({ state });

  for (const currentId of Object.keys(items)) {
    const el = buttonsMap[currentId];
    const images = document.getElementsByClassName(currentId);
    for (const image of images) {
      image.addEventListener("click", (event) => {
        document.getElementById("dialog")!.showModal();
        const isFilterTurnedOn = Object.values(state).some((item) => item.isFilterTurnedOn);
        const splitted = event.target!.id.split("~");
        const clickedElementNumber = parseInt(isFilterTurnedOn ? splitted[1] : splitted[2]);
        const incementSliderBy = clickedElementNumber - slider.stateIndex;
        if (incementSliderBy > 0) {
          slider.next(incementSliderBy);
        } else {
          slider.prev(-incementSliderBy);
        }
      });
    }
    el?.addEventListener("click", (event) => {
      window.location.hash = state[currentId].isFilterTurnedOn ? "#" : `#${currentId}`;
    });
  }

  window.addEventListener("hashchange", (event) => {
    event.preventDefault();
    const currentId = window.location.hash.substring(1) || new URL(event.oldURL).hash.slice(1);
    state[currentId].isFilterTurnedOn = !state[currentId].isFilterTurnedOn;
    updateStateAndButtonBackground({
      state,
      items,
      buttonsMap,
      currentId,
      classesToRemove: classesToChange,
      classesToToggle: classesToChange,
    });
    hideAndShowItems({ state, changeFilteredItemSize });
    changeSliderElements({ state });
    updateTextShown({ state });
  });

  function updateTextShown({ state }: { state: State }) {
    const selectedItem: any = Object.values(state).find((item: any) => {
      return item.isFilterTurnedOn;
    });
    const paragraph = document.getElementById("textToShow");
    while (paragraph?.firstChild) {
      paragraph?.removeChild(paragraph?.firstChild);
    }
    if (selectedItem) {
      const text = document.createTextNode(items[selectedItem.id]?.text);
      paragraph?.appendChild(text);
    }
  }
</script>
