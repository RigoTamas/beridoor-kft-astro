---
import { Image, Picture } from "@astrojs/image/components";
import Layout from "@layouts/Layout.astro";
import fs from "node:fs";
import "../assets/style/base.css";
import { getPlaiceholder } from "plaiceholder";
import Container from "@components/container.astro";
import { Icon } from "astro-icon";
interface Props {
  imagesRenderable: {
    imageRenderable: any;
    alt: string;
    projectType: string;
    pathFromProjectRoot: string;
  }[];
  title: string;
  description: string;
  textHtml: string;
}

const { imagesRenderable, title, description, textHtml } = Astro.props;

const placeHolderImages = {};
for (const img of imagesRenderable) {
  const file = await fs.promises.readFile(img.pathFromProjectRoot);
  const { base64 } = await getPlaiceholder(file);
  placeHolderImages[img.pathFromProjectRoot] = base64;
}
---

<Layout title={title} description={description}>
  <Container>
    <div class="mx-auto items-center grid gap-2 pt-16">
      <Fragment set:html={textHtml} />
    </div>
    <div>
      <div class="grid md:grid-cols-2 grid-cols-1 pt-16 pb-8 gap-8 justify-center mx-6">
        {
          imagesRenderable.map((item, iterCount) => {
            const base64 = placeHolderImages[item.pathFromProjectRoot];
            return (
              <div>
                <div
                  class:list={`${item.projectType} hover:cursor-pointer relative images-selector inline-block overflow-hidden rounded-lg`}>
                  <img
                    aria-hidden
                    alt=""
                    src={base64}
                    class:list={[
                      "absolute",
                      "inset-0",
                      "w-full",
                      "h-full",
                      "transform",
                      "scale-150",
                      "filter",
                      "blur-2xl",
                      "z-0",
                    ]}
                  />
                  <Picture
                    id={`${item.projectType}~${iterCount}`}
                    src={item.imageRenderable}
                    alt={item.alt}
                    sizes="93vw"
                    widths={[1400, 800, 500, 300]}
                    width={300}
                    height={200}
                    aspectRatio="3:2"
                    formats={["avif", "webp"]}
                    loading="lazy"
                    fit="cover"
                    position="center"
                    class="w-full z-20 relative"
                  />
                </div>
                <p class="text-sm text-center pt-1">{item.alt}</p>
              </div>
            );
          })
        }
      </div>
    </div>

    <dialog id="dialog" class="border-beridoorBlue dark:border-white dark:bg-beridoorDarkModeBg bg-white">
      <main class="max-w-6xl relative" slot="main">
        <div class="blaze-slider">
          <div class="blaze-container">
            <div class="relative blaze-track-container">
              <div class="blaze-track">
                {
                  imagesRenderable.map((item, iterCount) => {
                    return (
                      <div>
                        <Picture
                          src={item.imageRenderable}
                          alt={item.alt}
                          sizes="93vw"
                          widths={[1400, 800, 500, 300]}
                          width={300}
                          height={200}
                          aspectRatio="3:2"
                          formats={["avif", "webp"]}
                          loading="lazy"
                          fit="cover"
                          position="center"
                          class="w-full z-20 relative"
                        />
                      </div>
                    );
                  })
                }
              </div>
              <form class="absolute left-0 top-0 m-2" method="dialog">
                <button>
                  <Icon class="text-white w-5 sm:w-7" name="close-filled" />
                </button>
              </form>
              <div class="absolute left-0 mx-2 top-[47%]">
                <button class="blaze-prev rotate-[270deg]" id="blaze-prev">
                  <div class="w-5 sm:w-7 lg:w-9">
                    <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
                  </div>
                </button>
              </div>
              <div class="absolute right-0 mx-2 top-[47%]">
                <button class="blaze-next rotate-90" id="blaze-next">
                  <div class="w-5 sm:w-7 lg:w-9">
                    <Icon class="bg-white text-beridoorBlue rounded-3xl opacity-90" name="fe:arrow-up" />
                  </div>
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </dialog>
  </Container>
</Layout>

<script>
  import BlazeSlider from "blaze-slider";
  import "blaze-slider/dist/blaze.css";
  import { animate } from "motion";

  const el = document.querySelector(".blaze-slider") as HTMLElement;
  const slider = new BlazeSlider(el, {
    all: {
      stopAutoplayOnInteraction: true,
      enableAutoplay: false,
      draggable: true,
      transitionDuration: 600,
      slidesToShow: 1,
    },
  });

  const images = document.getElementsByClassName("images-selector");
  for (const image of images) {
    image?.addEventListener("mouseover", (e) => {
      animate(image, { scale: 1.05 });
    });
    image?.addEventListener("mouseout", (e) => {
      animate(image, { scale: 1.0 });
    });
    image.addEventListener("click", (event) => {
      document.getElementById("dialog")!.showModal();
      const splitted = event.target!.id.split("~");
      const clickedElementNumber = parseInt(splitted[1]);
      const incementSliderBy = clickedElementNumber - slider.stateIndex;
      if (incementSliderBy > 0) {
        slider.next(incementSliderBy);
      } else {
        slider.prev(-incementSliderBy);
      }
    });
  }

  document.addEventListener("keydown", (event) => {
    if (event.key === "ArrowRight") {
      slider.next();
    }
    if (event.key === "ArrowLeft") {
      slider.prev();
    }
  });
</script>
