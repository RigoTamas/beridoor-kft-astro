---
import { Image } from "@astrojs/image/components";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import path from "path";
import Button from "@components/ui/button.astro";

const items = {
  // key and id field needs to be the same
  telikert: {
    label: "Télikert",
    id: "telikert",
  },
  terasz: {
    label: "Teraszbeépítés",
    id: "terasz",
  },
  medencefedes: {
    label: "Medencefedés",
    id: "medencefedes",
  },
  szelfogo: {
    label: "Szélfogó",
    id: "szelfogo",
  },
  vedoteto: {
    label: "Elő-védőtető",
    id: "vedoteto",
  },
  veranda: {
    label: "Veranda",
    id: "veranda",
  },
};

// workaround for dynamic image imports: https://github.com/withastro/astro/issues/3373#issuecomment-1214245870
const viteImages = import.meta.glob<ImageMetadata>("../assets/portfolio/*/*/main/*", { import: "default" });
const imagesRenderable: { imageRenderable: any; alt: string; projectType: string; projectName: string }[] = [];
for (const [imgPath, imageFunction] of Object.entries(viteImages)) {
  const projetNamePath = path.dirname(path.dirname(imgPath));
  const projectName = path.basename(path.dirname(path.dirname(imgPath)));
  const projectTypePath = path.dirname(projetNamePath);
  const projectType = path.basename(projectTypePath);
  const imageRenderable = await imageFunction();
  imagesRenderable.push({ imageRenderable, projectType, projectName, alt: path.basename(imgPath) });
}
---

<Layout title="Portfolio">
  <div id="item-store" data-items={JSON.stringify(items)}></div>
  <Container>
    <!-- <div class="grid-cols-2 md:flex md:flex-wrap md:flex-row pt-16 pb-8 md:pt-12 md:pb-24 gap-16 justify-start"> -->
    <div>
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-4 justify-center">
        {
          Object.values(items).map((item) => (
            <Button id={item.id} style="outline" class="md:text-lg">
              <p>{item.label}</p>
            </Button>
          ))
        }
      </div>
    </div>
    <div>
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-8 justify-center">
        {
          imagesRenderable.map((item) => {
            return (
              <div class={`${item.projectType} images-selector`}>
                <a href={`/portfolio/${item.projectType}/${item.projectName}`}>
                  <Image
                    src={item.imageRenderable}
                    alt={item.alt}
                    width={300}
                    aspectRatio="3:2"
                    format="avif"
                    fit="cover"
                    position="center"
                    class="w-full rounded-md transition group-hover:-translate-y-1 group-hover:shadow-xl"
                  />
                </a>
              </div>
            );
          })
        }
      </div>
    </div>
  </Container>
</Layout>

<script>
  import { animate } from "motion";
  const itemStoreElement = document.getElementById("item-store");
  const items = JSON.parse(itemStoreElement?.dataset.items!) as Record<string, { label: string; id: string }>;

  const elements = document.getElementsByClassName("images-selector");
  for (let i = 0; i < elements.length; i++) {
    const elem = elements[i];
    elem?.addEventListener("mouseover", (e) => {
      animate(elem, { scale: 1.05 });
    });
    elem?.addEventListener("mouseout", (e) => {
      animate(elem, { scale: 1.0 });
    });
  }

  const fragment = window.location.hash.substring(1);
  const isValidFragment = Boolean(items[fragment]);
  const state = Object.entries(items).reduce((acc, [id, item]) => {
    if (isValidFragment) {
      return {
        ...acc,
        [id]: {
          ...item,
          isVisible: fragment === item.id,
          isFilterTurnedOn: fragment === item.id,
        },
      };
    } else {
      return {
        ...acc,
        [id]: {
          ...item,
          isVisible: true,
          isFilterTurnedOn: false,
        },
      };
    }
  }, {});
  const buttonsMap = Object.keys(items).reduce((acc, id) => ({ ...acc, [id]: document.getElementById(id) }), {});
  if (isValidFragment) {
    setInitialUi({ selectedButton: buttonsMap[fragment], state });
  }
  window.addEventListener("hashchange", (event) => {
    const currentId = window.location.hash.substring(1) || new URL(event.oldURL).hash.slice(1);
    state[currentId].isFilterTurnedOn = !state[currentId].isFilterTurnedOn;
    updateStateAndButtonBackground({ state, buttonsMap, currentId });
    hideAndShowPictures({ state });
  });

  for (const currentId of Object.keys(items)) {
    const el = document.getElementById(currentId);
    el?.addEventListener("click", () => {
      window.location = state[currentId].isFilterTurnedOn ? "#" : `#${currentId}`;
    });
  }

  function isEveryFilterTurnedOff(state) {
    return Object.values(state).every((item) => !item.isFilterTurnedOn);
  }

  function updateStateAndButtonBackground({ state, buttonsMap, currentId }) {
    if (isEveryFilterTurnedOff(state)) {
      for (const innerId of Object.keys(items)) {
        const button = buttonsMap[innerId];
        removeStylingFromNonSelectedButton(button);
        state[innerId].isVisible = true;
      }
    } else {
      for (const innerId of Object.keys(items)) {
        const currentState = state[innerId];
        const button = buttonsMap[innerId];
        if (innerId === currentId) {
          currentState.isVisible = true;
          addStylingToSelectedButton(button);
        } else {
          currentState.isFilterTurnedOn = false;
          currentState.isVisible = false;
          removeStylingFromNonSelectedButton(button);
        }
      }
    }
  }

  function removeStylingFromNonSelectedButton(button) {
    button.classList.remove("bg-beridoorBlue");
    button.classList.remove("text-white");
    button.classList.remove("border-cyan-600");
  }

  function addStylingToSelectedButton(button) {
    button.classList.toggle("bg-beridoorBlue");
    button.classList.toggle("border-cyan-600");
    button.classList.toggle("text-white");
  }

  function setInitialUi({ state, selectedButton }) {
    addStylingToSelectedButton(selectedButton);
    hideAndShowPictures({ state });
  }

  function hideAndShowPictures({ state }) {
    for (const item of Object.values(state)) {
      const elements = document.getElementsByClassName(item.id);
      for (const element of elements) {
        if (item.isVisible) {
          element.classList.remove("hidden");
        } else {
          element.classList.add("hidden");
        }
      }
    }
  }
</script>
