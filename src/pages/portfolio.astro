---
import { Image } from "@astrojs/image/components";
import Link from "@components/ui/link.astro";
import heroImage from "assets/hero.png";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import fs from "fs";
import path from "path";

const items = { // key and id field needs to be the same
  telikert: {
    label: "Télikert",
    id: "telikert",
  },
  // {
  //   label: "Teraszbeépítés",
  //   id: "terasz",
  // },
  // {
  //   label: "Medencefedés",
  //   id: "medencefedes",
  // },
  // {
  //   label: "Szélfogó",
  //   id: "szelfogo",
  // },
  // {
  //   label: "Elő-védőtető",
  //   id: "vedoteto",
  // },
  veranda: {
    label: "Veranda",
    id: "veranda"
  },
 };
const folderPath = "src/assets/portfolio";
---

<Layout title="Contact">
  <Container class="w-8/12">
    <!-- <div class="grid-cols-2 md:flex md:flex-wrap md:flex-row pt-16 pb-8 md:pt-12 md:pb-24 gap-16 justify-start"> -->
    <div class="bg-amber-200">
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-4 justify-center">
        {
          Object.values(items).map((item) => (
            <button id={item.id} class={`bg-cyan-400 hover:bg-slate-100`}>
              <p>{item.label}</p>
            </button>
          ))
        }
      </div>
    </div>
    <div class="bg-amber-500">
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-8 justify-center">
        {
          Object.values(items).map((item) => {
            const projects = fs.readdirSync(path.join(folderPath, item.id));
            return projects.map((project) => {
              const mainPictureName = fs.readdirSync(path.join(folderPath, item.id, project, "main"))[0];
              return (
                <div class={`${item.id}`}>
                  <Image
                    src={path.join(path.join(folderPath, item.id, project, "main", mainPictureName))}
                    alt={"asdasd"}
                    width={200}
                    aspectRatio="3:2"
                    format="avif"
                    fit="cover"
                    position="center"
                    class="w-full rounded-md rounded transition group-hover:-translate-y-1 group-hover:shadow-xl"
                  />
                </div>
              );
            });
          })
        }
      </div>
    </div>
  </Container>
</Layout>

<script define:vars={{ items }}>
  const state = Object.entries(items).reduce((acc, [id, item]) => ({...acc, [id]: {...item, isVisible: true}}), {})
  for (const id of Object.values(items)) {
    const el = document.getElementById(id);
    el?.addEventListener("click", () => {
      state[id].isVisible = !state[id].isVisible
      for (const item of Object.values(state)) {
        el.classList.toggle("bg-cyan-400");
        const elements = document.getElementsByClassName(item.id);
        for (const element of elements) {
          if (item.isVisible) {
            element.classList.remove("hidden");
          } else {
            element.classList.add("hidden");
          }
        }
      }
    });
  }
</script>
