---
import { Image } from "@astrojs/image/components";
import Link from "@components/ui/link.astro";
import heroImage from "assets/hero.png";
import Layout from "@layouts/Layout.astro";
import Container from "@components/container.astro";
import fs from "fs";
import path from "path";
import Button from "@components/ui/button.astro";

const items = {
  // key and id field needs to be the same
  telikert: {
    label: "Télikert",
    id: "telikert",
  },
  // {
  //   label: "Teraszbeépítés",
  //   id: "terasz",
  // },
  // {
  //   label: "Medencefedés",
  //   id: "medencefedes",
  // },
  // {
  //   label: "Szélfogó",
  //   id: "szelfogo",
  // },
  // {
  //   label: "Elő-védőtető",
  //   id: "vedoteto",
  // },
  veranda: {
    label: "Veranda",
    id: "veranda",
  },
};
const folderPath = "src/assets/portfolio";
---

<Layout title="Portfolio">
  <Container>
    <!-- <div class="grid-cols-2 md:flex md:flex-wrap md:flex-row pt-16 pb-8 md:pt-12 md:pb-24 gap-16 justify-start"> -->
    <div class="bg-amber-200">
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-4 justify-center">
        {
          Object.values(items).map((item) => (
            <Button id={item.id} style="outline" class="md:text-lg">
              <p>{item.label}</p>
            </Button>
          ))
        }
      </div>
    </div>
    <div class="bg-amber-500">
      <div class="md:flex md:flex-wrap md:flex-row pt-16 pb-8 grid grid-cols-2 gap-8 justify-center">
        {
          Object.values(items).map((item) => {
            const projects = fs.readdirSync(path.join(folderPath, item.id));
            return projects.map((project) => {
              const mainPictureName = fs.readdirSync(path.join(folderPath, item.id, project, "main"))[0];
              return (
                <div class={`${item.id}`}>
                  <Image
                    src={path.join(path.join(folderPath, item.id, project, "main", mainPictureName))}
                    alt={"asdasd"}
                    width={200}
                    aspectRatio="3:2"
                    format="avif"
                    fit="cover"
                    position="center"
                    class="w-full rounded-md rounded transition group-hover:-translate-y-1 group-hover:shadow-xl"
                  />
                </div>
              );
            });
          })
        }
      </div>
    </div>
  </Container>
</Layout>

<script define:vars={{ items }}>
  const state = Object.entries(items).reduce(
    (acc, [id, item]) => ({ ...acc, [id]: { ...item, isVisible: true, isFilterTurnedOn: false } }),
    {}
  );
  const buttonsMap = Object.keys(items).reduce((acc, id) => ({ ...acc, [id]: document.getElementById(id) }), {});
  for (const currentId of Object.keys(items)) {
    const el = document.getElementById(currentId);
    el?.addEventListener("click", () => {
      updateStateAndButtonBackground({ state, buttonsMap, currentId });
      hideAndShowPictures({ state });
    });
  }

  function isEveryFilterTurnedOff(state) {
    return Object.values(state).every((item) => !item.isFilterTurnedOn);
  }

  function updateStateAndButtonBackground({ state, buttonsMap, currentId }) {
    state[currentId].isFilterTurnedOn = !state[currentId].isFilterTurnedOn;
    if (isEveryFilterTurnedOff(state)) {
      for (const innerId of Object.keys(items)) {
        const button = buttonsMap[innerId];
        removeStylingFromNonSelectedButton(button);
        state[innerId].isVisible = true;
      }
    } else {
      for (const innerId of Object.keys(items)) {
        const currentState = state[innerId];
        const button = buttonsMap[innerId];
        if (innerId === currentId) {
          currentState.isVisible = true;
          addStylingToSelectedButton(button);
        } else {
          currentState.isFilterTurnedOn = false;
          currentState.isVisible = false;
          removeStylingFromNonSelectedButton(button);
        }
      }
    }
  }

  function removeStylingFromNonSelectedButton(button) {
    button.classList.remove("bg-beridoorBlue");
    button.classList.remove("text-white");
    button.classList.remove("border-cyan-600");
  }

  function addStylingToSelectedButton(button) {
    button.classList.add("bg-beridoorBlue");
    button.classList.add("box-border");
    button.classList.add("border-cyan-600");
    button.classList.add("text-white");
  }

  function hideAndShowPictures({ state }) {
    for (const item of Object.values(state)) {
      const elements = document.getElementsByClassName(item.id);
      for (const element of elements) {
        if (item.isVisible) {
          element.classList.remove("hidden");
        } else {
          element.classList.add("hidden");
        }
      }
    }
  }
</script>
